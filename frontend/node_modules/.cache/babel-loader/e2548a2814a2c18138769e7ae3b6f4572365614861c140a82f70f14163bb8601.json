{"ast":null,"code":"class ReadingTracker {\n  constructor() {\n    this.storageKey = 'reading_tracker_data';\n    this.sessionsKey = 'reading_sessions';\n    this.statsKey = 'reading_stats';\n  }\n  // Start a reading session\n  startReadingSession(articleId) {\n    const sessionId = `session_${Date.now()}_${articleId}`;\n    const session = {\n      id: sessionId,\n      articleId,\n      startTime: new Date(),\n      completed: false\n    };\n    const sessions = this.getSessions();\n    sessions.push(session);\n    this.saveSessions(sessions);\n    return sessionId;\n  }\n\n  // End a reading session\n  endReadingSession(sessionId, completed = true) {\n    const sessions = this.getSessions();\n    const session = sessions.find(s => s.id === sessionId);\n    if (session) {\n      session.endTime = new Date();\n      session.duration = Math.floor((session.endTime.getTime() - session.startTime.getTime()) / 1000);\n      session.completed = completed;\n      this.saveSessions(sessions);\n      this.updateStats();\n    }\n  }\n\n  // Get reading statistics\n  getReadingStats() {\n    const stats = localStorage.getItem(this.statsKey);\n    if (stats) {\n      return JSON.parse(stats);\n    }\n    return {\n      totalArticlesRead: 0,\n      totalReadingTime: 0,\n      currentStreak: 0,\n      longestStreak: 0,\n      averageReadingTime: 0,\n      todayReadCount: 0,\n      weeklyReadCount: 0,\n      monthlyReadCount: 0\n    };\n  }\n\n  // Get streak data\n  getStreakData() {\n    const sessions = this.getSessions();\n    const completedSessions = sessions.filter(s => s.completed && s.endTime);\n    if (completedSessions.length === 0) {\n      return {\n        currentStreak: 0,\n        longestStreak: 0,\n        streakHistory: []\n      };\n    }\n\n    // Group sessions by date\n    const sessionsByDate = new Map();\n    completedSessions.forEach(session => {\n      const date = session.endTime.toISOString().split('T')[0];\n      sessionsByDate.set(date, (sessionsByDate.get(date) || 0) + 1);\n    });\n\n    // Calculate streaks\n    const dates = Array.from(sessionsByDate.keys()).sort();\n    let currentStreak = 0;\n    let longestStreak = 0;\n    let tempStreak = 0;\n    const today = new Date().toISOString().split('T')[0];\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    for (let i = dates.length - 1; i >= 0; i--) {\n      const date = dates[i];\n      const expectedDate = new Date(Date.now() - (dates.length - 1 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      if (date === expectedDate) {\n        tempStreak++;\n        if (date === today || date === yesterday) {\n          currentStreak = tempStreak;\n        }\n        longestStreak = Math.max(longestStreak, tempStreak);\n      } else {\n        tempStreak = 0;\n      }\n    }\n\n    // Create streak history for the last 30 days\n    const streakHistory = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      streakHistory.push({\n        date,\n        readCount: sessionsByDate.get(date) || 0\n      });\n    }\n    return {\n      currentStreak,\n      longestStreak,\n      lastReadDate: completedSessions[completedSessions.length - 1].endTime,\n      streakHistory\n    };\n  }\n\n  // Update reading statistics\n  updateStats() {\n    const sessions = this.getSessions();\n    const completedSessions = sessions.filter(s => s.completed && s.endTime);\n    const totalReadingTime = completedSessions.reduce((total, session) => {\n      return total + (session.duration || 0);\n    }, 0) / 60; // Convert to minutes\n\n    const today = new Date().toISOString().split('T')[0];\n    const todaySessions = completedSessions.filter(s => s.endTime.toISOString().split('T')[0] === today);\n    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    const weeklySessions = completedSessions.filter(s => s.endTime >= weekAgo);\n    const monthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const monthlySessions = completedSessions.filter(s => s.endTime >= monthAgo);\n    const streakData = this.getStreakData();\n    const stats = {\n      totalArticlesRead: completedSessions.length,\n      totalReadingTime: Math.round(totalReadingTime),\n      currentStreak: streakData.currentStreak,\n      longestStreak: streakData.longestStreak,\n      averageReadingTime: completedSessions.length > 0 ? Math.round(totalReadingTime / completedSessions.length) : 0,\n      lastReadDate: streakData.lastReadDate,\n      todayReadCount: todaySessions.length,\n      weeklyReadCount: weeklySessions.length,\n      monthlyReadCount: monthlySessions.length\n    };\n    localStorage.setItem(this.statsKey, JSON.stringify(stats));\n  }\n\n  // Get all sessions\n  getSessions() {\n    const sessions = localStorage.getItem(this.sessionsKey);\n    if (sessions) {\n      const parsed = JSON.parse(sessions);\n      return parsed.map(s => ({\n        ...s,\n        startTime: new Date(s.startTime),\n        endTime: s.endTime ? new Date(s.endTime) : undefined\n      }));\n    }\n    return [];\n  }\n\n  // Save sessions\n  saveSessions(sessions) {\n    localStorage.setItem(this.sessionsKey, JSON.stringify(sessions));\n  }\n\n  // Clear all data (for testing)\n  clearAllData() {\n    localStorage.removeItem(this.sessionsKey);\n    localStorage.removeItem(this.statsKey);\n  }\n}\nexport const readingTracker = new ReadingTracker();","map":{"version":3,"names":["ReadingTracker","constructor","storageKey","sessionsKey","statsKey","startReadingSession","articleId","sessionId","Date","now","session","id","startTime","completed","sessions","getSessions","push","saveSessions","endReadingSession","find","s","endTime","duration","Math","floor","getTime","updateStats","getReadingStats","stats","localStorage","getItem","JSON","parse","totalArticlesRead","totalReadingTime","currentStreak","longestStreak","averageReadingTime","todayReadCount","weeklyReadCount","monthlyReadCount","getStreakData","completedSessions","filter","length","streakHistory","sessionsByDate","Map","forEach","date","toISOString","split","set","get","dates","Array","from","keys","sort","tempStreak","today","yesterday","i","expectedDate","max","readCount","lastReadDate","reduce","total","todaySessions","weekAgo","weeklySessions","monthAgo","monthlySessions","streakData","round","setItem","stringify","parsed","map","undefined","clearAllData","removeItem","readingTracker"],"sources":["/Users/apple/Documents/GitHub/Personalized-news-AI/frontend/src/services/readingTracker.ts"],"sourcesContent":["export interface ReadingSession {\n  id: string;\n  articleId: number;\n  startTime: Date;\n  endTime?: Date;\n  duration?: number; // in seconds\n  completed: boolean;\n}\n\nexport interface ReadingStats {\n  totalArticlesRead: number;\n  totalReadingTime: number; // in minutes\n  currentStreak: number;\n  longestStreak: number;\n  averageReadingTime: number;\n  lastReadDate?: Date;\n  todayReadCount: number;\n  weeklyReadCount: number;\n  monthlyReadCount: number;\n}\n\nexport interface StreakData {\n  currentStreak: number;\n  longestStreak: number;\n  lastReadDate?: Date;\n  streakHistory: Array<{\n    date: string;\n    readCount: number;\n  }>;\n}\n\nclass ReadingTracker {\n  private storageKey = 'reading_tracker_data';\n  private sessionsKey = 'reading_sessions';\n  private statsKey = 'reading_stats';\n\n  // Start a reading session\n  startReadingSession(articleId: number): string {\n    const sessionId = `session_${Date.now()}_${articleId}`;\n    const session: ReadingSession = {\n      id: sessionId,\n      articleId,\n      startTime: new Date(),\n      completed: false\n    };\n\n    const sessions = this.getSessions();\n    sessions.push(session);\n    this.saveSessions(sessions);\n\n    return sessionId;\n  }\n\n  // End a reading session\n  endReadingSession(sessionId: string, completed: boolean = true): void {\n    const sessions = this.getSessions();\n    const session = sessions.find(s => s.id === sessionId);\n    \n    if (session) {\n      session.endTime = new Date();\n      session.duration = Math.floor((session.endTime.getTime() - session.startTime.getTime()) / 1000);\n      session.completed = completed;\n      \n      this.saveSessions(sessions);\n      this.updateStats();\n    }\n  }\n\n  // Get reading statistics\n  getReadingStats(): ReadingStats {\n    const stats = localStorage.getItem(this.statsKey);\n    if (stats) {\n      return JSON.parse(stats);\n    }\n\n    return {\n      totalArticlesRead: 0,\n      totalReadingTime: 0,\n      currentStreak: 0,\n      longestStreak: 0,\n      averageReadingTime: 0,\n      todayReadCount: 0,\n      weeklyReadCount: 0,\n      monthlyReadCount: 0\n    };\n  }\n\n  // Get streak data\n  getStreakData(): StreakData {\n    const sessions = this.getSessions();\n    const completedSessions = sessions.filter(s => s.completed && s.endTime);\n    \n    if (completedSessions.length === 0) {\n      return {\n        currentStreak: 0,\n        longestStreak: 0,\n        streakHistory: []\n      };\n    }\n\n    // Group sessions by date\n    const sessionsByDate = new Map<string, number>();\n    completedSessions.forEach(session => {\n      const date = session.endTime!.toISOString().split('T')[0];\n      sessionsByDate.set(date, (sessionsByDate.get(date) || 0) + 1);\n    });\n\n    // Calculate streaks\n    const dates = Array.from(sessionsByDate.keys()).sort();\n    let currentStreak = 0;\n    let longestStreak = 0;\n    let tempStreak = 0;\n    const today = new Date().toISOString().split('T')[0];\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n    for (let i = dates.length - 1; i >= 0; i--) {\n      const date = dates[i];\n      const expectedDate = new Date(Date.now() - (dates.length - 1 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      \n      if (date === expectedDate) {\n        tempStreak++;\n        if (date === today || date === yesterday) {\n          currentStreak = tempStreak;\n        }\n        longestStreak = Math.max(longestStreak, tempStreak);\n      } else {\n        tempStreak = 0;\n      }\n    }\n\n    // Create streak history for the last 30 days\n    const streakHistory = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      streakHistory.push({\n        date,\n        readCount: sessionsByDate.get(date) || 0\n      });\n    }\n\n    return {\n      currentStreak,\n      longestStreak,\n      lastReadDate: completedSessions[completedSessions.length - 1].endTime,\n      streakHistory\n    };\n  }\n\n  // Update reading statistics\n  private updateStats(): void {\n    const sessions = this.getSessions();\n    const completedSessions = sessions.filter(s => s.completed && s.endTime);\n    \n    const totalReadingTime = completedSessions.reduce((total, session) => {\n      return total + (session.duration || 0);\n    }, 0) / 60; // Convert to minutes\n\n    const today = new Date().toISOString().split('T')[0];\n    const todaySessions = completedSessions.filter(s => \n      s.endTime!.toISOString().split('T')[0] === today\n    );\n\n    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    const weeklySessions = completedSessions.filter(s => \n      s.endTime! >= weekAgo\n    );\n\n    const monthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const monthlySessions = completedSessions.filter(s => \n      s.endTime! >= monthAgo\n    );\n\n    const streakData = this.getStreakData();\n\n    const stats: ReadingStats = {\n      totalArticlesRead: completedSessions.length,\n      totalReadingTime: Math.round(totalReadingTime),\n      currentStreak: streakData.currentStreak,\n      longestStreak: streakData.longestStreak,\n      averageReadingTime: completedSessions.length > 0 ? Math.round(totalReadingTime / completedSessions.length) : 0,\n      lastReadDate: streakData.lastReadDate,\n      todayReadCount: todaySessions.length,\n      weeklyReadCount: weeklySessions.length,\n      monthlyReadCount: monthlySessions.length\n    };\n\n    localStorage.setItem(this.statsKey, JSON.stringify(stats));\n  }\n\n  // Get all sessions\n  private getSessions(): ReadingSession[] {\n    const sessions = localStorage.getItem(this.sessionsKey);\n    if (sessions) {\n      const parsed = JSON.parse(sessions);\n      return parsed.map((s: any) => ({\n        ...s,\n        startTime: new Date(s.startTime),\n        endTime: s.endTime ? new Date(s.endTime) : undefined\n      }));\n    }\n    return [];\n  }\n\n  // Save sessions\n  private saveSessions(sessions: ReadingSession[]): void {\n    localStorage.setItem(this.sessionsKey, JSON.stringify(sessions));\n  }\n\n  // Clear all data (for testing)\n  clearAllData(): void {\n    localStorage.removeItem(this.sessionsKey);\n    localStorage.removeItem(this.statsKey);\n  }\n}\n\nexport const readingTracker = new ReadingTracker(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}