{"ast":null,"code":"class ReadingTracker{constructor(){this.storageKey='reading_tracker_data';this.sessionsKey='reading_sessions';this.statsKey='reading_stats';}// Start a reading session\nstartReadingSession(articleId){const sessionId=`session_${Date.now()}_${articleId}`;const session={id:sessionId,articleId,startTime:new Date(),completed:false};const sessions=this.getSessions();sessions.push(session);this.saveSessions(sessions);return sessionId;}// End a reading session\nendReadingSession(sessionId){let completed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const sessions=this.getSessions();const session=sessions.find(s=>s.id===sessionId);if(session){session.endTime=new Date();session.duration=Math.floor((session.endTime.getTime()-session.startTime.getTime())/1000);session.completed=completed;this.saveSessions(sessions);this.updateStats();}}// Get reading statistics\ngetReadingStats(){const stats=localStorage.getItem(this.statsKey);if(stats){return JSON.parse(stats);}return{totalArticlesRead:0,totalReadingTime:0,currentStreak:0,longestStreak:0,averageReadingTime:0,todayReadCount:0,weeklyReadCount:0,monthlyReadCount:0};}// Get streak data\ngetStreakData(){const sessions=this.getSessions();const completedSessions=sessions.filter(s=>s.completed&&s.endTime);if(completedSessions.length===0){return{currentStreak:0,longestStreak:0,streakHistory:[]};}// Group sessions by date\nconst sessionsByDate=new Map();completedSessions.forEach(session=>{const date=session.endTime.toISOString().split('T')[0];sessionsByDate.set(date,(sessionsByDate.get(date)||0)+1);});// Calculate streaks\nconst dates=Array.from(sessionsByDate.keys()).sort();let currentStreak=0;let longestStreak=0;let tempStreak=0;const today=new Date().toISOString().split('T')[0];const yesterday=new Date(Date.now()-24*60*60*1000).toISOString().split('T')[0];for(let i=dates.length-1;i>=0;i--){const date=dates[i];const expectedDate=new Date(Date.now()-(dates.length-1-i)*24*60*60*1000).toISOString().split('T')[0];if(date===expectedDate){tempStreak++;if(date===today||date===yesterday){currentStreak=tempStreak;}longestStreak=Math.max(longestStreak,tempStreak);}else{tempStreak=0;}}// Create streak history for the last 30 days\nconst streakHistory=[];for(let i=29;i>=0;i--){const date=new Date(Date.now()-i*24*60*60*1000).toISOString().split('T')[0];streakHistory.push({date,readCount:sessionsByDate.get(date)||0});}return{currentStreak,longestStreak,lastReadDate:completedSessions[completedSessions.length-1].endTime,streakHistory};}// Update reading statistics\nupdateStats(){const sessions=this.getSessions();const completedSessions=sessions.filter(s=>s.completed&&s.endTime);const totalReadingTime=completedSessions.reduce((total,session)=>{return total+(session.duration||0);},0)/60;// Convert to minutes\nconst today=new Date().toISOString().split('T')[0];const todaySessions=completedSessions.filter(s=>s.endTime.toISOString().split('T')[0]===today);const weekAgo=new Date(Date.now()-7*24*60*60*1000);const weeklySessions=completedSessions.filter(s=>s.endTime>=weekAgo);const monthAgo=new Date(Date.now()-30*24*60*60*1000);const monthlySessions=completedSessions.filter(s=>s.endTime>=monthAgo);const streakData=this.getStreakData();const stats={totalArticlesRead:completedSessions.length,totalReadingTime:Math.round(totalReadingTime),currentStreak:streakData.currentStreak,longestStreak:streakData.longestStreak,averageReadingTime:completedSessions.length>0?Math.round(totalReadingTime/completedSessions.length):0,lastReadDate:streakData.lastReadDate,todayReadCount:todaySessions.length,weeklyReadCount:weeklySessions.length,monthlyReadCount:monthlySessions.length};localStorage.setItem(this.statsKey,JSON.stringify(stats));}// Get all sessions\ngetSessions(){const sessions=localStorage.getItem(this.sessionsKey);if(sessions){const parsed=JSON.parse(sessions);return parsed.map(s=>({...s,startTime:new Date(s.startTime),endTime:s.endTime?new Date(s.endTime):undefined}));}return[];}// Save sessions\nsaveSessions(sessions){localStorage.setItem(this.sessionsKey,JSON.stringify(sessions));}// Clear all data (for testing)\nclearAllData(){localStorage.removeItem(this.sessionsKey);localStorage.removeItem(this.statsKey);}}export const readingTracker=new ReadingTracker();","map":{"version":3,"names":["ReadingTracker","constructor","storageKey","sessionsKey","statsKey","startReadingSession","articleId","sessionId","Date","now","session","id","startTime","completed","sessions","getSessions","push","saveSessions","endReadingSession","arguments","length","undefined","find","s","endTime","duration","Math","floor","getTime","updateStats","getReadingStats","stats","localStorage","getItem","JSON","parse","totalArticlesRead","totalReadingTime","currentStreak","longestStreak","averageReadingTime","todayReadCount","weeklyReadCount","monthlyReadCount","getStreakData","completedSessions","filter","streakHistory","sessionsByDate","Map","forEach","date","toISOString","split","set","get","dates","Array","from","keys","sort","tempStreak","today","yesterday","i","expectedDate","max","readCount","lastReadDate","reduce","total","todaySessions","weekAgo","weeklySessions","monthAgo","monthlySessions","streakData","round","setItem","stringify","parsed","map","clearAllData","removeItem","readingTracker"],"sources":["/Users/apple/Documents/GitHub/Personalized-news-AI/frontend/src/services/readingTracker.ts"],"sourcesContent":["export interface ReadingSession {\n  id: string;\n  articleId: number;\n  startTime: Date;\n  endTime?: Date;\n  duration?: number; // in seconds\n  completed: boolean;\n}\n\nexport interface ReadingStats {\n  totalArticlesRead: number;\n  totalReadingTime: number; // in minutes\n  currentStreak: number;\n  longestStreak: number;\n  averageReadingTime: number;\n  lastReadDate?: Date;\n  todayReadCount: number;\n  weeklyReadCount: number;\n  monthlyReadCount: number;\n}\n\nexport interface StreakData {\n  currentStreak: number;\n  longestStreak: number;\n  lastReadDate?: Date;\n  streakHistory: Array<{\n    date: string;\n    readCount: number;\n  }>;\n}\n\nclass ReadingTracker {\n  private storageKey = 'reading_tracker_data';\n  private sessionsKey = 'reading_sessions';\n  private statsKey = 'reading_stats';\n\n  // Start a reading session\n  startReadingSession(articleId: number): string {\n    const sessionId = `session_${Date.now()}_${articleId}`;\n    const session: ReadingSession = {\n      id: sessionId,\n      articleId,\n      startTime: new Date(),\n      completed: false\n    };\n\n    const sessions = this.getSessions();\n    sessions.push(session);\n    this.saveSessions(sessions);\n\n    return sessionId;\n  }\n\n  // End a reading session\n  endReadingSession(sessionId: string, completed: boolean = true): void {\n    const sessions = this.getSessions();\n    const session = sessions.find(s => s.id === sessionId);\n    \n    if (session) {\n      session.endTime = new Date();\n      session.duration = Math.floor((session.endTime.getTime() - session.startTime.getTime()) / 1000);\n      session.completed = completed;\n      \n      this.saveSessions(sessions);\n      this.updateStats();\n    }\n  }\n\n  // Get reading statistics\n  getReadingStats(): ReadingStats {\n    const stats = localStorage.getItem(this.statsKey);\n    if (stats) {\n      return JSON.parse(stats);\n    }\n\n    return {\n      totalArticlesRead: 0,\n      totalReadingTime: 0,\n      currentStreak: 0,\n      longestStreak: 0,\n      averageReadingTime: 0,\n      todayReadCount: 0,\n      weeklyReadCount: 0,\n      monthlyReadCount: 0\n    };\n  }\n\n  // Get streak data\n  getStreakData(): StreakData {\n    const sessions = this.getSessions();\n    const completedSessions = sessions.filter(s => s.completed && s.endTime);\n    \n    if (completedSessions.length === 0) {\n      return {\n        currentStreak: 0,\n        longestStreak: 0,\n        streakHistory: []\n      };\n    }\n\n    // Group sessions by date\n    const sessionsByDate = new Map<string, number>();\n    completedSessions.forEach(session => {\n      const date = session.endTime!.toISOString().split('T')[0];\n      sessionsByDate.set(date, (sessionsByDate.get(date) || 0) + 1);\n    });\n\n    // Calculate streaks\n    const dates = Array.from(sessionsByDate.keys()).sort();\n    let currentStreak = 0;\n    let longestStreak = 0;\n    let tempStreak = 0;\n    const today = new Date().toISOString().split('T')[0];\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n    for (let i = dates.length - 1; i >= 0; i--) {\n      const date = dates[i];\n      const expectedDate = new Date(Date.now() - (dates.length - 1 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      \n      if (date === expectedDate) {\n        tempStreak++;\n        if (date === today || date === yesterday) {\n          currentStreak = tempStreak;\n        }\n        longestStreak = Math.max(longestStreak, tempStreak);\n      } else {\n        tempStreak = 0;\n      }\n    }\n\n    // Create streak history for the last 30 days\n    const streakHistory = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      streakHistory.push({\n        date,\n        readCount: sessionsByDate.get(date) || 0\n      });\n    }\n\n    return {\n      currentStreak,\n      longestStreak,\n      lastReadDate: completedSessions[completedSessions.length - 1].endTime,\n      streakHistory\n    };\n  }\n\n  // Update reading statistics\n  private updateStats(): void {\n    const sessions = this.getSessions();\n    const completedSessions = sessions.filter(s => s.completed && s.endTime);\n    \n    const totalReadingTime = completedSessions.reduce((total, session) => {\n      return total + (session.duration || 0);\n    }, 0) / 60; // Convert to minutes\n\n    const today = new Date().toISOString().split('T')[0];\n    const todaySessions = completedSessions.filter(s => \n      s.endTime!.toISOString().split('T')[0] === today\n    );\n\n    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    const weeklySessions = completedSessions.filter(s => \n      s.endTime! >= weekAgo\n    );\n\n    const monthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const monthlySessions = completedSessions.filter(s => \n      s.endTime! >= monthAgo\n    );\n\n    const streakData = this.getStreakData();\n\n    const stats: ReadingStats = {\n      totalArticlesRead: completedSessions.length,\n      totalReadingTime: Math.round(totalReadingTime),\n      currentStreak: streakData.currentStreak,\n      longestStreak: streakData.longestStreak,\n      averageReadingTime: completedSessions.length > 0 ? Math.round(totalReadingTime / completedSessions.length) : 0,\n      lastReadDate: streakData.lastReadDate,\n      todayReadCount: todaySessions.length,\n      weeklyReadCount: weeklySessions.length,\n      monthlyReadCount: monthlySessions.length\n    };\n\n    localStorage.setItem(this.statsKey, JSON.stringify(stats));\n  }\n\n  // Get all sessions\n  private getSessions(): ReadingSession[] {\n    const sessions = localStorage.getItem(this.sessionsKey);\n    if (sessions) {\n      const parsed = JSON.parse(sessions);\n      return parsed.map((s: any) => ({\n        ...s,\n        startTime: new Date(s.startTime),\n        endTime: s.endTime ? new Date(s.endTime) : undefined\n      }));\n    }\n    return [];\n  }\n\n  // Save sessions\n  private saveSessions(sessions: ReadingSession[]): void {\n    localStorage.setItem(this.sessionsKey, JSON.stringify(sessions));\n  }\n\n  // Clear all data (for testing)\n  clearAllData(): void {\n    localStorage.removeItem(this.sessionsKey);\n    localStorage.removeItem(this.statsKey);\n  }\n}\n\nexport const readingTracker = new ReadingTracker(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}